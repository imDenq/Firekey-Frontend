// src/services/HybridCredentialService.js - Version compl√®te et corrig√©e

import E2ECryptoService from "./E2ECryptoService";

class HybridCredentialService {
  constructor() {
    this.e2eService = new E2ECryptoService();
    this.accessToken = localStorage.getItem("accessToken") || "";

    // √âtat local de session (pas persist√©)
    this.sessionState = {
      masterKey: null,
      derivationParams: null,
      e2eUnlocked: false,
      lastStatusCheck: null,
      statusCache: null,
      unlockPromise: null, // NOUVEAU: Pour √©viter les doubles modals
    };
  }

  /**
   * Met √† jour le token d'acc√®s
   */
  updateAccessToken() {
    this.accessToken = localStorage.getItem("accessToken") || "";
  }

  /**
   * R√©cup√®re le statut E2E depuis le backend avec cache
   */
  async getE2EStatus(forceRefresh = false) {
    try {
      // Cache de 30 secondes pour √©viter trop de requ√™tes
      const now = Date.now();
      if (
        !forceRefresh &&
        this.sessionState.statusCache &&
        this.sessionState.lastStatusCheck &&
        now - this.sessionState.lastStatusCheck < 30000
      ) {
        console.log("üéØ Utilisation du cache pour le statut E2E");
        return this.sessionState.statusCache;
      }

      this.updateAccessToken();

      const response = await fetch(
        "https://firekey.theokaszak.fr/auth/users/e2e_status/",
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${this.accessToken}`,
          },
        }
      );

      if (!response.ok) {
        if (response.status === 401) {
          console.warn("‚ö†Ô∏è Token expir√©, nettoyage de la session");
          this.clearSession();
          throw new Error("Token expir√©");
        }
        throw new Error("Erreur r√©cup√©ration statut E2E");
      }

      const data = await response.json();
      console.log("üéØ Statut E2E depuis le backend:", data.e2e_status);

      // Mettre en cache
      this.sessionState.statusCache = data.e2e_status;
      this.sessionState.lastStatusCheck = now;

      return data.e2e_status;
    } catch (error) {
      console.error("‚ùå Erreur r√©cup√©ration statut E2E:", error);
      return {
        available: false,
        enabled: false,
        setup_completed: false,
        activated_at: null,
      };
    }
  }

  /**
   * R√©cup√®re les param√®tres de d√©rivation de cl√©
   */
  async getDerivationParams() {
    try {
      this.updateAccessToken();

      const response = await fetch(
        "https://firekey.theokaszak.fr/api/key-derivation/",
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${this.accessToken}`,
          },
        }
      );

      if (!response.ok) {
        throw new Error("Erreur r√©cup√©ration param√®tres de d√©rivation");
      }

      const data = await response.json();
      console.log("üîë Param√®tres de d√©rivation r√©cup√©r√©s:", data);

      return data.derivation_params;
    } catch (error) {
      console.error("‚ùå Erreur r√©cup√©ration param√®tres de d√©rivation:", error);
      return null;
    }
  }

  /**
   * Initialise le service - VERSION COMPL√àTE
   */
  async initialize(userPassword = null) {
    try {
      console.log("üöÄ Initialisation HybridCredentialService...");

      // 1. R√©cup√©rer le statut depuis le backend
      const backendStatus = await this.getE2EStatus(true); // Force refresh lors de l'init

      const result = {
        e2eAvailable: backendStatus.available,
        e2eEnabled: backendStatus.enabled,
        e2eUnlocked: false,
        setupCompleted: backendStatus.setup_completed,
        activatedAt: backendStatus.activated_at,
        isNewUser: !backendStatus.setup_completed && !backendStatus.enabled,
      };

      // 2. Si E2E est activ√© et qu'on a un mot de passe, essayer de d√©bloquer
      if (backendStatus.enabled && userPassword) {
        try {
          console.log(
            "üîë Tentative de d√©verrouillage E2E avec mot de passe..."
          );

          // R√©cup√©rer les param√®tres de d√©rivation
          const derivationParams = await this.getDerivationParams();

          if (derivationParams) {
            this.sessionState.derivationParams = derivationParams;

            // Initialiser la cl√© ma√Ætre pour cette session
            const initResult = await this.e2eService.initialize(
              userPassword,
              this.sessionState.derivationParams
            );

            if (initResult.success) {
              this.sessionState.masterKey = initResult.masterKey;
              this.sessionState.e2eUnlocked = true;
              result.e2eUnlocked = true;
              console.log("‚úÖ E2E d√©bloqu√© pour cette session");
            } else {
              console.warn("‚ö†Ô∏è √âchec d√©verrouillage E2E:", initResult.error);
            }
          }
        } catch (error) {
          console.error("‚ùå Erreur d√©verrouillage E2E:", error);
        }
      }

      // 3. Si E2E est activ√© mais pas d√©bloqu√©, r√©cup√©rer quand m√™me les param√®tres
      if (
        backendStatus.enabled &&
        !result.e2eUnlocked &&
        !this.sessionState.derivationParams
      ) {
        try {
          const derivationParams = await this.getDerivationParams();
          if (derivationParams) {
            this.sessionState.derivationParams = derivationParams;
          }
        } catch (error) {
          console.warn(
            "‚ö†Ô∏è Impossible de r√©cup√©rer les param√®tres de d√©rivation:",
            error
          );
        }
      }

      console.log("üéØ √âtat final apr√®s initialisation:", result);
      return result;
    } catch (error) {
      console.error("‚ùå Erreur initialisation:", error);
      return {
        e2eAvailable: false,
        e2eEnabled: false,
        e2eUnlocked: false,
        setupCompleted: false,
        activatedAt: null,
        isNewUser: false,
      };
    }
  }

  /**
   * Active E2E c√¥t√© backend
   */
  async activateE2E(userPassword) {
    try {
      console.log("üîê Activation E2E c√¥t√© backend...");
      console.log("üîë Mot de passe fourni:", userPassword ? "OUI" : "NON");

      this.updateAccessToken();

      const payload = {
        user_password: userPassword,
      };

      console.log("üì° Envoi de la requ√™te d'activation E2E...");
      console.log(
        "üéØ URL:",
        "https://firekey.theokaszak.fr/api/credentials-e2e/activate_e2e/"
      );

      const response = await fetch(
        "https://firekey.theokaszak.fr/api/credentials-e2e/activate_e2e/",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${this.accessToken}`,
          },
          body: JSON.stringify(payload),
        }
      );

      console.log("üì® R√©ponse re√ßue, status:", response.status);

      if (!response.ok) {
        const error = await response.json();
        console.error("‚ùå Erreur de l'API:", error);
        throw new Error(error.error || error.detail || "Erreur activation E2E");
      }

      const data = await response.json();
      console.log("‚úÖ E2E activ√© c√¥t√© backend:", data);

      // Mettre √† jour l'√©tat de session
      if (data.derivation_params) {
        this.sessionState.derivationParams = data.derivation_params;

        // Initialiser la cl√© ma√Ætre pour cette session
        const initResult = await this.e2eService.initialize(
          userPassword,
          this.sessionState.derivationParams
        );

        if (initResult.success) {
          this.sessionState.masterKey = initResult.masterKey;
          this.sessionState.e2eUnlocked = true;
          console.log("üîì E2E d√©bloqu√© pour cette session");
        } else {
          console.warn(
            "‚ö†Ô∏è Impossible de d√©bloquer E2E pour cette session:",
            initResult.error
          );
        }
      }

      // Vider le cache du statut pour forcer un refresh
      this.sessionState.statusCache = null;
      this.sessionState.lastStatusCheck = null;

      console.log("‚úÖ E2E activ√© avec succ√®s");
      return { success: true, e2eStatus: data.e2e_status, data: data };
    } catch (error) {
      console.error("‚ùå Erreur activation E2E:", error);
      return { success: false, error: error.message };
    }
  }

  /**
   * D√©sactive E2E c√¥t√© backend
   */
  async deactivateE2E(userPassword) {
    try {
      console.log("üîì D√©sactivation E2E c√¥t√© backend...");

      this.updateAccessToken();

      const response = await fetch(
        "https://firekey.theokaszak.fr/api/credentials-e2e/deactivate_e2e/",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${this.accessToken}`,
          },
          body: JSON.stringify({
            user_password: userPassword,
          }),
        }
      );

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || "Erreur d√©sactivation E2E");
      }

      const data = await response.json();

      // Nettoyer l'√©tat de session
      this.clearSession();

      console.log("‚úÖ E2E d√©sactiv√© avec succ√®s");
      return { success: true, e2eStatus: data.e2e_status };
    } catch (error) {
      console.error("‚ùå Erreur d√©sactivation E2E:", error);
      return { success: false, error: error.message };
    }
  }

  /**
   * Nettoie l'√©tat de session
   */
  clearSession() {
    this.sessionState = {
      masterKey: null,
      derivationParams: null,
      e2eUnlocked: false,
      lastStatusCheck: null,
      statusCache: null,
      unlockPromise: null,
    };
  }

  /**
   * V√©rifie si E2E est d√©bloqu√© pour cette session
   */
  isE2EUnlocked() {
    return this.sessionState.e2eUnlocked;
  }

  /**
   * V√©rifie si E2E est pr√™t pour la cr√©ation de credentials
   */
  isE2EReadyForCreation() {
    return (
      this.sessionState.e2eUnlocked &&
      this.sessionState.masterKey &&
      this.sessionState.derivationParams &&
      this.e2eService.isReady()
    );
  }

  /**
   * Demande le mot de passe pour d√©bloquer E2E dans cette session
   * MODIFI√â pour √©viter les doubles modals
   */
  async unlockE2EForSession() {
    // Si une demande de d√©verrouillage est d√©j√† en cours, attendre son r√©sultat
    if (this.sessionState.unlockPromise) {
      console.log("üîÑ Demande de d√©verrouillage d√©j√† en cours, attente...");
      return this.sessionState.unlockPromise;
    }

    // Cr√©er une nouvelle promesse de d√©verrouillage
    this.sessionState.unlockPromise = new Promise((resolve) => {
      console.log("üîì Ouverture de la modal de d√©verrouillage E2E");

      // Modal pour demander le mot de passe
      const modal = document.createElement("div");
      modal.innerHTML = `
        <div style="
          position: fixed; 
          top: 0; 
          left: 0; 
          width: 100%; 
          height: 100%; 
          background: rgba(0,0,0,0.8); 
          display: flex; 
          align-items: center; 
          justify-content: center; 
          z-index: 10000;
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        ">
          <div style="
            background: #1e1e1e; 
            padding: 24px; 
            border-radius: 12px; 
            color: white; 
            max-width: 400px; 
            width: 90%;
            box-shadow: 0 8px 32px rgba(0,0,0,0.3);
            border: 1px solid rgba(255,255,255,0.1);
          ">
            <h3 style="margin: 0 0 8px 0; color: #90caf9; font-size: 18px; font-weight: 600;">
              üîê D√©bloquer E2E
            </h3>
            <p style="margin: 0 0 16px 0; color: #b0b0b0; font-size: 14px; line-height: 1.4;">
              Entrez votre mot de passe pour acc√©der aux credentials chiffr√©s de bout en bout.
            </p>
            <input 
              type="password" 
              placeholder="Mot de passe" 
              id="e2e-password-input"
              style="
                width: 100%; 
                padding: 12px; 
                border: 1px solid #444; 
                border-radius: 6px; 
                background: #2a2a2a; 
                color: white; 
                font-size: 16px;
                box-sizing: border-box;
                margin-bottom: 4px;
                outline: none;
                transition: border-color 0.2s;
              "
            />
            <div id="error-message" style="
              color: #f44336; 
              font-size: 12px; 
              margin-bottom: 16px; 
              min-height: 16px;
            "></div>
            <div style="display: flex; gap: 12px; justify-content: flex-end;">
              <button 
                id="e2e-cancel-btn"
                style="
                  padding: 8px 16px; 
                  border: 1px solid #666; 
                  border-radius: 6px; 
                  background: transparent; 
                  color: #b0b0b0; 
                  cursor: pointer;
                  font-size: 14px;
                  transition: all 0.2s;
                "
              >
                Annuler
              </button>
              <button 
                id="e2e-unlock-btn"
                style="
                  padding: 8px 16px; 
                  border: none; 
                  border-radius: 6px; 
                  background: #90caf9; 
                  color: #121212; 
                  cursor: pointer; 
                  font-weight: 500;
                  font-size: 14px;
                  transition: all 0.2s;
                "
              >
                D√©bloquer
              </button>
            </div>
          </div>
        </div>
      `;

      document.body.appendChild(modal);

      const passwordInput = modal.querySelector("#e2e-password-input");
      const unlockBtn = modal.querySelector("#e2e-unlock-btn");
      const cancelBtn = modal.querySelector("#e2e-cancel-btn");
      const errorMessage = modal.querySelector("#error-message");

      // Styles hover
      unlockBtn.addEventListener("mouseenter", () => {
        unlockBtn.style.background = "#64b5f6";
      });
      unlockBtn.addEventListener("mouseleave", () => {
        unlockBtn.style.background = "#90caf9";
      });

      cancelBtn.addEventListener("mouseenter", () => {
        cancelBtn.style.borderColor = "#888";
        cancelBtn.style.color = "#fff";
      });
      cancelBtn.addEventListener("mouseleave", () => {
        cancelBtn.style.borderColor = "#666";
        cancelBtn.style.color = "#b0b0b0";
      });

      passwordInput.addEventListener("focus", () => {
        passwordInput.style.borderColor = "#90caf9";
      });
      passwordInput.addEventListener("blur", () => {
        passwordInput.style.borderColor = "#444";
      });

      const cleanup = () => {
        document.body.removeChild(modal);
        // IMPORTANT: R√©initialiser la promesse apr√®s nettoyage
        this.sessionState.unlockPromise = null;
      };

      const showError = (message) => {
        errorMessage.textContent = message;
        passwordInput.style.borderColor = "#f44336";
      };

      const clearError = () => {
        errorMessage.textContent = "";
        passwordInput.style.borderColor = "#444";
      };

      const handleUnlock = async () => {
        const password = passwordInput.value.trim();
        if (!password) {
          showError("Veuillez entrer votre mot de passe");
          return;
        }

        clearError();
        unlockBtn.textContent = "D√©verrouillage...";
        unlockBtn.disabled = true;

        try {
          // Initialiser la cl√© ma√Ætre pour cette session
          const initResult = await this.e2eService.initialize(
            password,
            this.sessionState.derivationParams
          );

          if (initResult.success) {
            this.sessionState.masterKey = initResult.masterKey;
            this.sessionState.e2eUnlocked = true;
            console.log("‚úÖ E2E d√©bloqu√© avec succ√®s");
            cleanup();
            resolve({ success: true });
          } else {
            showError("Mot de passe incorrect");
            unlockBtn.textContent = "D√©bloquer";
            unlockBtn.disabled = false;
            passwordInput.focus();
          }
        } catch (error) {
          console.error("Erreur d√©verrouillage:", error);
          showError("Erreur lors du d√©verrouillage");
          unlockBtn.textContent = "D√©bloquer";
          unlockBtn.disabled = false;
          passwordInput.focus();
        }
      };

      const handleCancel = () => {
        console.log("‚ùå D√©verrouillage E2E annul√©");
        cleanup();
        resolve({ success: false, cancelled: true });
      };

      unlockBtn.addEventListener("click", handleUnlock);
      cancelBtn.addEventListener("click", handleCancel);

      passwordInput.addEventListener("keypress", (e) => {
        if (e.key === "Enter") {
          handleUnlock();
        }
      });

      // Focus et s√©lection
      passwordInput.focus();
    });

    return this.sessionState.unlockPromise;
  }

  /**
   * R√©cup√®re tous les credentials (E2E + Legacy)
   * MODIFI√â pour √©viter les doubles appels
   */
  async getAllCredentials() {
    const results = {
      e2e: [],
      legacy: [],
    };

    try {
      this.updateAccessToken();

      console.log("üì• R√©cup√©ration des credentials...");

      // 1. Toujours r√©cup√©rer les credentials legacy
      try {
        const legacyResponse = await fetch(
          "https://firekey.theokaszak.fr/api/credentials/",
          {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${this.accessToken}`,
            },
          }
        );

        if (legacyResponse.ok) {
          results.legacy = await legacyResponse.json();
          console.log(
            `üì¶ ${results.legacy.length} credentials legacy r√©cup√©r√©s`
          );
        } else if (legacyResponse.status !== 401) {
          console.warn(
            "‚ö†Ô∏è Erreur r√©cup√©ration credentials legacy:",
            legacyResponse.status
          );
        }
      } catch (error) {
        console.warn("‚ö†Ô∏è Erreur r√©cup√©ration credentials legacy:", error);
      }

      // 2. R√©cup√©rer le statut E2E
      const e2eStatus = await this.getE2EStatus();

      if (e2eStatus.enabled) {
        console.log("üîê E2E activ√©, v√©rification du d√©verrouillage...");

        // S'assurer qu'on a les param√®tres de d√©rivation
        if (!this.sessionState.derivationParams) {
          const derivationParams = await this.getDerivationParams();
          if (derivationParams) {
            this.sessionState.derivationParams = derivationParams;
          } else {
            console.error(
              "‚ùå Impossible de r√©cup√©rer les param√®tres de d√©rivation"
            );
            return results;
          }
        }

        // Si E2E n'est pas d√©bloqu√© pour cette session, demander le mot de passe
        // MODIFI√â: V√©rifier aussi si une promesse est en cours
        if (
          !this.sessionState.e2eUnlocked &&
          !this.sessionState.unlockPromise
        ) {
          console.log("üîë E2E non d√©bloqu√©, demande du mot de passe...");

          const unlockResult = await this.unlockE2EForSession();
          if (!unlockResult.success) {
            console.log("‚ùå D√©verrouillage E2E annul√© ou √©chou√©");
            return results;
          }
        }

        // Si E2E est d√©bloqu√©, r√©cup√©rer les credentials E2E
        if (this.sessionState.e2eUnlocked) {
          try {
            const e2eResponse = await fetch(
              "https://firekey.theokaszak.fr/api/credentials-e2e/",
              {
                method: "GET",
                headers: {
                  "Content-Type": "application/json",
                  Authorization: `Bearer ${this.accessToken}`,
                },
              }
            );

            if (e2eResponse.ok) {
              const encryptedCredentials = await e2eResponse.json();
              console.log(
                `üîê ${encryptedCredentials.length} credentials E2E r√©cup√©r√©s`
              );

              // D√©chiffrer les credentials E2E
              results.e2e = await Promise.all(
                encryptedCredentials.map(async (cred) => {
                  try {
                    const decrypted = await this.e2eService.decryptCredential(
                      cred
                    );
                    return {
                      ...decrypted,
                      id: cred.id,
                      created_at: cred.created_at,
                      updated_at: cred.updated_at,
                      is_sensitive: cred.is_sensitive,
                      unlocked: true, // Les credentials E2E sont d√©j√† d√©chiffr√©s
                    };
                  } catch (error) {
                    console.error(
                      `‚ùå Erreur d√©chiffrement credential E2E ${cred.id}:`,
                      error
                    );
                    return {
                      id: cred.id,
                      name: "‚ùå Erreur de d√©chiffrement",
                      website: "",
                      email: "",
                      password: "",
                      note: "Ce credential n'a pas pu √™tre d√©chiffr√©. V√©rifiez votre mot de passe.",
                      is_sensitive: false,
                      created_at: cred.created_at,
                      updated_at: cred.updated_at,
                      unlocked: false,
                      tags: [],
                    };
                  }
                })
              );
            } else if (e2eResponse.status === 403) {
              const errorData = await e2eResponse.json();
              console.warn("‚ö†Ô∏è E2E non autoris√©:", errorData);
            } else {
              console.warn(
                "‚ö†Ô∏è Erreur r√©cup√©ration credentials E2E:",
                e2eResponse.status
              );
            }
          } catch (error) {
            console.error("‚ùå Erreur r√©cup√©ration credentials E2E:", error);
          }
        }
      }

      console.log(
        `‚úÖ Total r√©cup√©r√©: ${results.legacy.length} legacy + ${results.e2e.length} E2E`
      );
      return results;
    } catch (error) {
      console.error("‚ùå Erreur g√©n√©rale r√©cup√©ration credentials:", error);
      return results;
    }
  }

  /**
   * Sauvegarde un credential en mode E2E avec v√©rifications
   */
  async saveCredentialE2E(credentialData) {
    console.log("üíæ Tentative de sauvegarde E2E...");
    console.log("üîê √âtat de la session:", {
      e2eUnlocked: this.sessionState.e2eUnlocked,
      hasMasterKey: !!this.sessionState.masterKey,
      hasDerivationParams: !!this.sessionState.derivationParams,
      serviceReady: this.e2eService.isReady(),
    });

    // Si E2E n'est pas d√©bloqu√©, essayer de le d√©bloquer
    if (!this.sessionState.e2eUnlocked) {
      console.log("üîë E2E non d√©bloqu√©, tentative de d√©verrouillage...");

      // S'assurer qu'on a les param√®tres de d√©rivation
      if (!this.sessionState.derivationParams) {
        const derivationParams = await this.getDerivationParams();
        if (derivationParams) {
          this.sessionState.derivationParams = derivationParams;
        } else {
          throw new Error(
            "Impossible de r√©cup√©rer les param√®tres de d√©rivation E2E"
          );
        }
      }

      // Demander le d√©verrouillage
      const unlockResult = await this.unlockE2EForSession();
      if (!unlockResult.success) {
        throw new Error("D√©verrouillage E2E annul√© ou √©chou√©");
      }
    }

    // V√©rifier que E2E est maintenant pr√™t
    if (!this.isE2EReadyForCreation()) {
      console.error("‚ùå E2E non pr√™t apr√®s tentative de d√©verrouillage");
      throw new Error("E2E non pr√™t pour la cr√©ation. Veuillez r√©essayer.");
    }

    try {
      console.log("üîí Chiffrement du credential c√¥t√© client...");

      // Chiffrer le credential c√¥t√© client
      const encrypted = await this.e2eService.encryptCredential(credentialData);
      console.log("‚úÖ Credential chiffr√© c√¥t√© client");

      this.updateAccessToken();

      const response = await fetch(
        "https://firekey.theokaszak.fr/api/credentials-e2e/",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${this.accessToken}`,
          },
          body: JSON.stringify(encrypted),
        }
      );

      if (!response.ok) {
        const error = await response.json();
        console.error("‚ùå Erreur API:", error);
        throw new Error(error.detail || error.error || "Erreur sauvegarde E2E");
      }

      const savedCredential = await response.json();
      console.log("‚úÖ Credential E2E sauvegard√©:", savedCredential.id);

      return { success: true, type: "e2e", data: savedCredential };
    } catch (error) {
      console.error("‚ùå Erreur sauvegarde E2E:", error);
      throw error;
    }
  }

  /**
   * Sauvegarde un credential en mode Legacy
   */
  async saveCredentialLegacy(credentialData) {
    try {
      console.log("üíæ Sauvegarde credential Legacy...");

      this.updateAccessToken();

      const response = await fetch("https://firekey.theokaszak.fr/api/credentials/", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${this.accessToken}`,
        },
        body: JSON.stringify(credentialData),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(
          error.detail || error.error || "Erreur sauvegarde Legacy"
        );
      }

      const savedCredential = await response.json();
      console.log("‚úÖ Credential Legacy sauvegard√©:", savedCredential.id);

      return { success: true, type: "legacy", data: savedCredential };
    } catch (error) {
      console.error("‚ùå Erreur sauvegarde Legacy:", error);
      throw error;
    }
  }

  /**
   * Met √† jour un credential (d√©tecte automatiquement le type)
   */
  async updateCredential(credentialId, credentialData, isE2E = false) {
    try {
      console.log(
        `üîÑ Mise √† jour credential ${isE2E ? "E2E" : "Legacy"}:`,
        credentialId
      );

      this.updateAccessToken();

      let endpoint, body;

      if (isE2E) {
        if (!this.sessionState.e2eUnlocked) {
          throw new Error("E2E non d√©bloqu√© pour cette session");
        }

        // Pour E2E, chiffrer les donn√©es si n√©cessaire
        if (
          credentialData.password ||
          credentialData.name ||
          credentialData.website
        ) {
          body = await this.e2eService.encryptCredential(credentialData);
        } else {
          body = credentialData;
        }

        endpoint = `https://firekey.theokaszak.fr/api/credentials-e2e/${credentialId}/`;
      } else {
        endpoint = `https://firekey.theokaszak.fr/api/credentials/${credentialId}/`;
        body = credentialData;
      }

      const response = await fetch(endpoint, {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${this.accessToken}`,
        },
        body: JSON.stringify(body),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.detail || error.error || "Erreur mise √† jour");
      }

      const updatedCredential = await response.json();
      console.log("‚úÖ Credential mis √† jour:", updatedCredential.id);

      return {
        success: true,
        type: isE2E ? "e2e" : "legacy",
        data: updatedCredential,
      };
    } catch (error) {
      console.error("‚ùå Erreur mise √† jour credential:", error);
      throw error;
    }
  }

  /**
   * Supprime un credential (d√©tecte automatiquement le type)
   */
  async deleteCredential(credentialId, isE2E = false) {
    try {
      console.log(
        `üóëÔ∏è Suppression credential ${isE2E ? "E2E" : "Legacy"}:`,
        credentialId
      );

      this.updateAccessToken();

      const endpoint = isE2E
        ? `https://firekey.theokaszak.fr/api/credentials-e2e/${credentialId}/`
        : `https://firekey.theokaszak.fr/api/credentials/${credentialId}/`;

      const response = await fetch(endpoint, {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${this.accessToken}`,
        },
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.detail || error.error || "Erreur suppression");
      }

      console.log("‚úÖ Credential supprim√©:", credentialId);
      return { success: true, type: isE2E ? "e2e" : "legacy" };
    } catch (error) {
      console.error("‚ùå Erreur suppression credential:", error);
      throw error;
    }
  }

  /**
   * Recherche dans les credentials E2E (recherche chiffr√©e)
   */
  async searchE2ECredentials(query) {
    if (!this.sessionState.e2eUnlocked) {
      throw new Error("E2E non d√©bloqu√© pour cette session");
    }

    try {
      this.updateAccessToken();

      const response = await fetch(
        `https://firekey.theokaszak.fr/api/credentials-e2e/search/?q=${encodeURIComponent(
          query
        )}`,
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${this.accessToken}`,
          },
        }
      );

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.detail || error.error || "Erreur recherche E2E");
      }

      const data = await response.json();

      // D√©chiffrer les r√©sultats
      const decryptedResults = await Promise.all(
        data.results.map(async (cred) => {
          try {
            const decrypted = await this.e2eService.decryptCredential(cred);
            return {
              ...decrypted,
              id: cred.id,
              created_at: cred.created_at,
              updated_at: cred.updated_at,
              is_sensitive: cred.is_sensitive,
            };
          } catch (error) {
            console.error("Erreur d√©chiffrement r√©sultat de recherche:", error);
            return null;
          }
        })
      );

      return decryptedResults.filter((result) => result !== null);
    } catch (error) {
      console.error("‚ùå Erreur recherche E2E:", error);
      throw error;
    }
  }

  /**
   * Migre un credential legacy vers E2E
   */
  async migrateCredentialToE2E(legacyCredentialId, credentialData) {
    if (!this.sessionState.e2eUnlocked) {
      throw new Error("E2E non d√©bloqu√© pour cette session");
    }

    try {
      console.log("üîÑ Migration credential vers E2E:", legacyCredentialId);

      // Chiffrer les donn√©es
      const encryptedData = await this.e2eService.encryptCredential(
        credentialData
      );

      this.updateAccessToken();

      const response = await fetch(
        "https://firekey.theokaszak.fr/api/credentials-e2e/migrate_from_legacy/",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${this.accessToken}`,
          },
          body: JSON.stringify({
            legacy_credential_id: legacyCredentialId,
            encrypted_data: encryptedData.encrypted_data,
            search_hashes: encryptedData.search_hashes,
          }),
        }
      );

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.detail || error.error || "Erreur migration E2E");
      }

      const result = await response.json();
      console.log("‚úÖ Migration r√©ussie:", result);

      return { success: true, e2eCredential: result.e2e_credential };
    } catch (error) {
      console.error("‚ùå Erreur migration E2E:", error);
      throw error;
    }
  }

  /**
   * Obtient les statistiques de credentials
   */
  async getCredentialStats() {
    try {
      const allCredentials = await this.getAllCredentials();

      const stats = {
        total: allCredentials.e2e.length + allCredentials.legacy.length,
        e2eCount: allCredentials.e2e.length,
        legacyCount: allCredentials.legacy.length,
        e2ePercentage: 0,
      };

      if (stats.total > 0) {
        stats.e2ePercentage = Math.round((stats.e2eCount / stats.total) * 100);
      }

      return stats;
    } catch (error) {
      console.error("‚ùå Erreur r√©cup√©ration statistiques:", error);
      return {
        total: 0,
        e2eCount: 0,
        legacyCount: 0,
        e2ePercentage: 0,
      };
    }
  }

  /**
   * Utilitaire pour d√©terminer si un credential est E2E
   */
  isE2ECredential(credential) {
    return (
      credential._source === "e2e" ||
      credential.encrypted_name !== undefined ||
      credential.algorithm !== undefined
    );
  }

  /**
   * Nettoie compl√®tement le service (logout)
   */
  destroy() {
    console.log("üßπ Nettoyage HybridCredentialService...");
    this.clearSession();
    this.accessToken = "";
    if (this.e2eService && typeof this.e2eService.destroy === "function") {
      this.e2eService.destroy();
    }
  }
}

export default HybridCredentialService;
